<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<%-- 주의) 이미 main에서 형식을 갖추고 있기 때문에 레이아웃으로 들어가려면 그 형식을 지우고 내용만 넣어주도록 한다!! (일부요소로 포함되어지는 것이 목적임)
           레이아웃을 구성하는 요소만 포함시키도록 한다. => 즉 몸체에 해당하는 내용들을 지우도록 한다. --%>


상단 메뉴 : 
<a href="#">HOME</a>
<a href="#">INFO</a>





<%-- 
순수 jsp파일로 작업되어져 있는 파일을 모델1기반이라고 한다.
이 모델1기반에서는 페이지모듈화와 요청흐름제어가 아주 중요한 기능이다. (페이지 모듈화는 include 액션태그를 말하는 것이였고, 요청 흐름 제어는 forward 액션태그를 일컫는 말이였다.)
현재 진행되는 모든 jsp로 작업되는 프로젝트들은 모델2기반으로 작업이 되고 있다.
 
모델1과 모델2의 차이점은? 자바코드와 웹코드의 분리유무
모델1은 자바코드와 웹코드가 페이지에 혼용되고 있는 기술이 jsp이고, 이를 분리하지 않고 하나의 파일 안에 코드들을 작성해놓은 것을 모델1기반이라고 말한다. 
        처음 jsp가 릴리즈될 때 작은규모의 프로젝트가 많이 이루어졌기 때문에 모델1로 사용을 했었음 -> 분리되지 않은 형태이기 때문에 코드 분석의 어려움은 존재했었음
모델2(MVC패턴)는 자바의 코드(서블릿에 작성)와 웹표준의 코드를 분리시켜서 작업을 하되 
        서로 하나의 jsp페이지 안에서 동작되어지는 효과를 그대로 가져갈 수 있게끔 환경을 구성한 것이다. (뒤에서 자세히 설명 예정)


[액션 태그] => 액션태그는 톰캣이 이해하는 언어임. include를 통해서 들어가는 페이지에서의 주석문은 톰캣이 이해하는 주석으로 달아줘야 함.
- 모델1기반해서 자바코드가 너무 많다보니까 디자이너와 개발자들이 코드를 분석하는데 힘들어함 
  효율적으로 작업할 수 있는 방법을 찾다보니까 자주 사용되어지는 자바의 유용한 기능들을 태그(웹표준임)의 형태로 정의함.
  되도록 자바코드를 배제하고 태그의 형태로 작성하면서 가독성을 높이기 위한 문법적 요소 중 하나인 것이다.
  !!액션태그는 코드를 분리하지 않은 하나의 jsp페이지 내에서 조금이라도 스크립트 요소를 최소화하기 위함의 요소이다!!
   
  jsp:(액션태그의 기호)로 시작하는 태그를 액션태그라고 불러주고 있음 
  그 중에 첫번째 include의 액션태그를 살펴볼 예정이다.(forward액션태그도 있음)
  
회사 홈페이지를 보면 메인에서 메뉴에 들어가더라도 바뀌지 않는 고정된 구간이 있음 (회사의 헤더와 풋터, 서브메뉴(메뉴관련 텍스트만 변경)부분)
이동되는 페이지마다 고정된 구간을 똑같은 코드로 반복해서 작업하는 것은 상당히 비효율적이다.
만약 동일하게 반복되는 구간을 똑같은 코드로 반복하여 작업했었다면 로고 하나를 바꾸더라도 페이지마다 일일히 바꿔서 수정해줘야함 
                                                                                          -> 번거롭고 비효율적인 일이다.  

효율적인 방법은 반복되는 구간을 따로 작업하여 만들어두고, 페이지를 구성할 때 해당 구간에 삽입하는 형식으로 구성하고,
단지 그 페이지가 업데이트가 되게끔 만들어준다면 로고 하나를 바꾸더라도 따로 만들었던 그 한페이지만 수정해주면 된다.
=> 따로 작업한 내용을 해당되는 영역에 어떻게 삽입할 수 있을까? 그 삽입을 쉽게 해주는 기능을 액션태그로 구현하여 제공을 해주고 있는 것이다.

현재 실습에서는 레이아웃에서 공통이 되어지는 UI영역을 별도로 작업하기 위한 용도로 header, footer, subMenu의 파일을 만들어놓은 것임
	● include 액션태그의 동작흐름: 사용자가 브라우저 요청 -> 톰캣이 읽어가면서 실행 -> include액션태그를 만나면 내부에서는 어떤 동작이 되어질까?
	                          페이지속성에 페이지의 위치 정보를 담아줬는데 해당 위치로 이동을 해가는 개념이다.
	                          
	                          실질적으로 내부에서는 코드들이 jsp를 읽어가면서 자바로 코드를 변환하여 컴파일하고, 그 컴파일된 실행의 결과를 출력버퍼에 쌓으면서 실행을 시킴
	                          즉, 컴파일된 내용들을 한줄씩 읽어가면서 출력버퍼에 쌓아가는 것인데 출력버퍼에는 .class파일이 있을 것이고 코드를 실행하면서 쌓는 것임
	                          그렇게 코드를 읽어가면서 include액션태그(톰캣이 이해하는 문법구문이다.)를 만나게 되고 톰캣이 읽어가는 순간 page에 지정한 페이지로 이동해감
	                          이동해간 파일에서 작성된 내용들을 실행 -> 루틴은 똑같이 브라우저쪽으로 전송시킴. -> 수행이 끝나면 복귀 -> 그 다음 내용을 계속 읽어갈 것임
	                          출력버퍼입장에서는 상단을 실행한 내용들이 버퍼에 쌓아져 있을 것이고 이동하여 읽어간 내용은 그 다음에 순차적으로 쌓아질 것이다.
	                          브라우저에서 최종으로 받을 내용은 버퍼에 쌓인 내용임 -> 브라우저 입장에서는 하나의 페이지로 인식하게 됨
	                          클라이언트가 받아보는 결과는 하나의 웹페이지처럼 보일 뿐이다.(서버의 실행흐름을 파악하는 것이 중요함)

=> include에서 param의 자식태그를 사용할 수 있음 


 --%>
