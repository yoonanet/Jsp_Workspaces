<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>옵션 선택 화면</title>
</head>
<body>
	<!-- 사용자가 선택한 페이지로 이동해가고 싶은 상황 -->
	<form action="05_selectView.jsp"> <!-- submit의 버튼을 눌리면 서버에 전달하는 응답페이지의 요청정보를 원래는 action에 지정을 해줬었음 
	                                       -> 하지만 action속성은 하나의 응답페이지만 지정할 수 있음 -->
		<h3>보고 싶은 페이지 선택 : </h3>
		<select name="code"> <!-- 그룹핑의 개념으로 name속성을 지정 -->
			<option value="A">Cafe A 페이지</option>
			<option value="B">Cafe B 페이지</option>
			<option value="C">Cafe C 페이지</option> <!-- 선택한 value의 값이 서버로 전달이 되어질 것이다. -->
		</select>
		<br><br>
		<input type="submit" value="페이지 선택"> 
	</form>


<%-- forward 액션태그 => 모델1기반의 프로젝트에서는 아주 빈번하게 활용되는 기능이다.
     
     클라이언트에게 로그인에 대한 화면을 전송했다고 가정
     그렇게 되면 사용자한테 아이디와 패스워드를 전달받게 될 것이다. 
     -> DB에 저장된 데이터와 동일하다면 로그인에 성공했다는 화면을 보여주도록 한다.
     만약 패스워드가 맞지 않다면 다시 로그인을 하게끔 로그인 화면을 다시 전송해주도록 한다.
     
     현재 사용자의 입력한 값을 판단하여 화면이 달라질 수 있음 (로그인 성공 -> 로그인에 성공된 화면 / 로그인 실패 -> 로그인 화면 재전송)
     하지만 submit을 통한 변환되는 페이지 정보는 form태그에 action속성에 하나의 페이지만 등록할 수 있음
     
     이러한 상황에서 forward의 액션태그를 사용하도록 제공을 해주고 있는 것임
     
     scope(영역) => jsp에서는 데이터 소멸 시점에 대한 메모리 영역으로 4가지의 영역이 존재했음 
                   (메모리에 접근하려면 메모리의 이름과 동일하게 .연산자를 통해 접근하여 setAttribute메서드를 통해 제공되도록 했음)
     page와 request: 요청정보에 대해서 서버가 응답을 보낸 시점에 데이터를 jsp에 의해 자동으로 소멸시켜주는 메모리 영역이였다.
     session: 사용자가 종료 요청을 해오거나 브라우저가 종료가 되는 순간 메모리영역에 저장된 데이터를 소멸시킴
     application: 서버가 stop되기 전까지는 데이터를 보관하는 특징을 가짐
     
     이전에 설명에서는 page와 request를 동일하게 생각하라고 말씀을 주셨지만 어떤 차이점이 있는지를 이번에 살펴볼 예정이다.
     page와 request는 응답을 보내준 시점에 데이터를 소멸시켜주는 것은 이 두 영역이 동일하다.
     
     사용자의 선택값에 따라서 페이지를 다르게 이동해가면서 응답으로 보내줄 때,
     page와 request의 차이에서
     page영역은 클라이언트가 요청이 왔을 때 뭔가의 데이터를 하나 저장한다고 했을 때
     이 데이터를 페이지영역에 저장을 하면 페이지에 저장된 데이터는 내 jsp페이지에서만 접근이 가능하다.
     즉, getAttribute하여 데이터를 읽어오면 잘 읽혀짐 (내 페이지 안에서만 데이터가 유효한 것이다.)
         b가 선택되어 이동을 하게 된다면 b페이지에서는 데이터를 읽어올 수 없다.
         
     request영역에서는 이동되어지는 페이지 내에서 데이터를 꺼내올 때 모두 다 꺼내와질 수 있다.
                       response를 보내기 이전이기 때문에 데이터를 다 꺼내올 수 있는 것이다.
     즉, 두 영역의 차이점은 내 페이지안에서만 접근이 가능(page)한지 최종적으로 응답을 보내줄 때에 거쳐간 모든 페이지에서 접근이 가능한지(request)에 대한 부분이다.
     
     유념사항) request, session, application 동일한 이름의 기본객체를 통해 .을 통해 영역에 접근을 하면 됐다.
               하지만 page영역에 접근을 하고자 할 때는 pageContext로 접근하도록 해야한다. 
               
               단독페이지영역만의 데이터를 저장하는 경우는 거의 드물다. 저장하려고 한다면 최종적인 응답을 보내기 전까지 데이터들에 대한 공유가 가능해야하기 때문이다.
               기본적으로는 request영역에 페이지의 데이터를 저장해서 처리를 하는 것이 무난한 방법이다.     
     --%>


</body>
</html>