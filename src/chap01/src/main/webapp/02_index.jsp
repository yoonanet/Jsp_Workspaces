<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>메인페이지</title>
</head>
<body>
	
	<h1>index.jsp 파일입니다.</h1>
	<h1>최윤아</h1> 
	
	<!-- 실행을 하면 html과 동일하게 화면이 보여지고 있음
	     파일에 대한 정보를 전달하지 않아도 정상적으로 실행되고 있음 (http://localhost:8090/chap01/)
	     프로젝트의 이름만 지정을 하고, 브라우저에서 요청을 하면 
	     => 디폴트로 index.html이나 index.jsp파일을 찾아서 응답으로 보내주고 있다는 것을 알 수 있다.
	     
	     index.html과 index.jsp파일이 공존한다면? default로 index URL 요청을 하면 html을 호출을 해주게 된다.
	     -> index.html과 index.jsp파일이 둘 중에 하나만 있으면 별도로 브라우저창에서 파일의 이름을 요청하지 않더라도 index파일을 찾아서 처리를 해주고
	        두 가지의 파일이 있으면 html을 우선순위로 하여금 호출을 해주게 된다
	     
	     !!jsp와 html에 대한 명확히 구분하여 서비스를 구축해가는 것이 중요하다!!
	     jsp가 가지는 특징: java프로그래밍 언어를 사용한다!!
	                        html안에는 자바라는 문법을 사용할 수 없다.
	                        
	     jsp내에서 자바문법을 사용할 수 있다는 것이 html과 가장 두드러진 차이점이다.
	     웹페이지를 구성하면서도 자바와 같이 혼용할 수 있는 기술이 jsp이다.
	     
	     이 기술이 대표적으로 왜 필요한가? 
	     jsp의 기술은 웹표준과 자바의 기술을 활용해서 jdbc(자바를 이용해서 DB를 연동하는 기술)를 구성할 수 있도록 제공을 해주는 것이다. 
	                  데이터베이스를 이용해서 브라우저 화면에 탑제할 수 있도록 만든 기술이 jsp인 것이다.
	                  -> 톰캣도 jsp기반하여 서비스가 되어지도록 서포트가 되어지는 것이라고 할 수 있다.
	     
	     (html, css, jQuery, javascript _ 브라우저의 화면을 만들어주는 기술 
	      => 쇼핑몰의 상세화면에 들어가면 상품을 구매한 상품구매후기가 있는데 그 데이터들이 DB보관하도록 할 것이다.
	      웹표준은 데이터베이스와 연결해서 연동할 수 있는 기술이 전혀 지원하지 않는다.
	      앞에서는 jdbc를 이용했음. 자바와 DB를 연동해서 사용할 수 있게끔 제공해주는 기술!!) 
	      
	      [웹 어플리케이션의 서비스 루틴]
	      - 클라이언트 요청이 왔을 때 자체적으로 화면을 보내주면 될지, (ex.회원가입화면으로 인폼에 대한 화면들)
	        데이터베이스와 연동된 파일을 보내줘야 할지 판단해야 하는 톰캣의 앞단을 웹서버라고 한다. (실질적인 비즈니스 작업들)
	      	
	      	회원가입을 하면 서버입장에서는 입력받은 데이터를 DB에 잘 보관해야함 -> 이때 DB와 연동하여 처리되어야 함.
	      	DB와 연동하여 실질적인 동작의 파트 부분이 어플리케이션 서버이다.
	      	실질적인 백엔드단에 작업들은 어플리케이션 서버를 보면 된다.
	      	여기서 DB와 연동을 하는 실질적인 작업들은 jdbc로 처리가 되어지는 것이다.
	      	
	      	[실행 순서] 웹서버에 기능 요청 -> 톰캣이 어떤 화면을 보낼지 판단하여 웹 어플리케이션과 작업이 됨 -> 요청에 대한 응답을 보내줌
	      	http프로토콜의 특징은 브라우저가 최초서버에 요청을 하면 서버가 처리하여 응답이 보내면서 작업이 끝나게 되면 연결을 끊어버린다!!
	      	
	      	[어플리케이션 서버 방식 - 현재 서비스되는 개념] 
	      	최초요청을 받게 되면 내부적으로는 jsp(자바기술을 이용하는 것이고, 웹표준의 모양도 자바에 탑제되어 처리되어지는 개념)
	      	한 페이지를 저장할 수 있는 처음 메모리 공간을 할당 -> 페이지의 내용을 담아서 응답으로 보내주게 됨.
	      	http프로토콜은 연결을 끊게 됨. 연결을 끊었다고 해서 new한 메모리까지 소멸시키지는 않는다.
	      	그렇게 새로운 사람이 요청을 하게 되면 요청에 맞는 화면을 메모리 공간에서 먼저 검색하여 할당된 공간내에서 서비스를 하는 것이다!!
	      	서버의 핵심도 얼마나 빠르게 서비스를 해줄지에 대한 사항임. -> 따라서 new는 너무 많은 퍼포먼스를 요구하기 때문에 검색을 하는게 더 빠른 것임.
	      	
	      	서버가 메모리 공간 할당? 
	      	=> 동시에 많은 사람들이 화면을 요청해올 수 있는데 메모리는 한계가 있음
	      	   어느 정도 적정선까지 요청이 왔을 때 대응을 할 것인지가 서버는 메모리 공간을 갖추고 있는 것이라는 것을 알 수 있음.
	      	
	      	[CGI방식_초창기서비스] => 무조건 new(공간을 할당)를 해줬음, 그렇다 보니 서버의 자원(메모리 공간)을 과도하게 사용한 것임
	      	[실행코드방식과 스크립트방식]=> 자바(자바는 컴퓨터에서 사용하기 위해 컴파일의 과정이 필요했음)와 
	      	웹표준(실행을 하면 브라우저는 위에서 아래로 한줄 씩 읽어가면서 실행, 별도의 컴파일이 필요하지 않음,
	      	       별도의 컴파일의 과정이 생략되기 때문에 jsp도 스크립트 방식이라고 함)을 생각
	      	
	      	jsp가 스크립트 방식이면 자바를 어떻게 처리하는가?
	      	jsp는 내부에서 컴파일을 해준다. 엄밀하게 말하면 jsp는 스크립트방식이 아니다.
	      	톰캣이 내부에서 알아서 컴파일을 해주기 때문에 프로그래머 눈에서는 컴파일을 하는지 알 수 없음.
	      	
	      	jsp의 기본적인 형식 틀은 html이다. html은 컴파일을 할 필요가 없기 때문에 분류만 스크립트방식으로 지정을 해놓은 것 뿐이다.
	      	
	      	실행코드방식과 스크립트방식 중에 퍼포먼스가 좋은 것은? 
	      	실행하는 것은 컴퓨터가 실행하기 때문에 컴퓨터가 알아듣는 말로 실행하는 것이 퍼포먼스적으로 좋다. 
	      	즉, 실행코드방식(.class)이 퍼포먼스적으로 좋다.
	      	ex) 파이썬은 껍데기만 구성해놓고 핵심 로직들은 자바나 c언어를 통해 구성을 해놓는 것임.
	      	
	      	운영체제가 관리하는 어플리케이션의 고유번호가 포트번호임.
	      	
	      	jsp를 사용하다보면 반드시 같이 따라붙는 용어가 서블릿임
	      	자바라는 프로그래밍으로 웹을 서비스할 때 jsp라는 기술이 먼저 나온 것이 아님
	      	처음 기술은 서블릿이였음 이 서블릿은 순수 자바프로그램으로 웹을 서비스할 수 있게끔 제공된 기술이다.
	      	서블릿의 코드를 살펴보면 자바 코드만으로 화면을 구성하는데 텍스트 기반으로 다 구성을 해줌. (메소드를 호출하면서 텍스트로 호출)
	      	● 노가다 + 기술구현이 쉽지 않았음 -> 복잡해서 외면받았음
	      	2000년대는 PHP(html기반기술)로 웹사이트들을 구축했음 -> 하지만 유료라 기업들은 부담이였음.
	      	이후 서블릿이 외면 받는 것에 자바진영들은 jsp의 기술을 만들어낸 것이다.
	      	
	      	톰캣이라는 서버를 보면 jsp와 서블릿이 같이 존재하고 있다.
	      	jsp단독으로만은 서비스를 할 수 없음!! jsp와 서블릿이 연동하여 동작되게끔 서비스를 해주고 있는 것임
	      	
	      	[jsp 개발 환경]
	      	자바기반이기 때문에 JDK가 설치되어 있어야 함, 
	      	웹컨테이너는 10버전(jsp와 연동되어지는 추가 기술들에서 9버전 이하의 호환되게끔 구현이 되어져 있음 -> 나중에 설명 예정)
	      	코드 편집기 이클립스 활용
	      	JDK 설치 후 환경 변수 – JAVA_HOME 환경 변수 설정 (이미 셋팅됨)
	      -->
	
	<% 
		int sum = 0;
	
		for(int i=0; i <= 10; i++) {
			sum += i;
		}
	%>
	
	<%= sum%> <!-- 55라는 값이 화면상에 출력되고 있음 -->
	
</body>
</html>