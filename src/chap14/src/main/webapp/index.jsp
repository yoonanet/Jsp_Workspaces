<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>main page</title>
</head>
<body>
	
	<%-- <form action="<%= request.getContextPath() %>/loginProc.jsp" method="post"> 기존 jsp서비스의 방법(직접적인 요청) --%>
	<form action="<%= request.getContextPath() %>/login.do" method="post"> 
	<%-- 기존에는 action속성에 직접적으로 jsp파일을 요청하게끔 처리하고 있었음 => jsp파일에서는 스크립트를 통해서 코드를 구성했음 (구성하기 복잡한 부분들이 있었음)	                       
	     이 부분을 .java파일에서 자바코드로 작성을 하도록 하는 방법이 서블릿인 것이다.
	     지금은 action에 jsp파일을 넣어주는 것이 아니라 우리가 만든 서블릿의 클래스 안에 정의되어져 있는 doget이나 dopost메소드를 톰캣이 호출할 수 있게끔만 만들어주면 된다. 
	     따라서 서블릿을 action에 연결하도록 한다!!
	     
	     action 절대경로를 넣어주면 주소창에 의해 그대로 서버창에 요청을 함
	     서블릿파일 요청 => 절대파일 경로에서 임의로 이름을 만들어주도록 한다. (서블릿에 요청할 때 이름을 내가 지어주도록 하는 것임)
	     (login.do => 네이버에서 요청한다라고 해서 .do를 붙였음_ 웹서비스에서 범용화됨) 
	     
	     로그인 버튼을 눌렀을 때 톰캣이 서블릿페이지의 메소드를 호출했으면 하는 것이다. -> 톰캣에 정보를 알려주려고 하는 의도인 것이다.
	     이는 web.xml파일을 통해 톰캣에게 정보를 알려주도록 한다. 
	     => servlet과 servlet-mapping을 쌍으로 지정해주면 되는 것이다. (이 두가지를 어떻게 연결시켜주느냐)
	        두 개의 설정 값에서 servlet-name의 자식을 똑같은 이름으로 지정해주면 된다. => 동일이름으로 지정하면 서로 짝이 되는 것이다.
	        servlet에서 servlet-class자식태그를 추가적으로 지정해줌(클래스의 이름을 알려주도록 함.) / servlet-mapping에서는 url-pattern자식을 추가 지정해줌 =>/login.do로 지정 
	        (톰캣아 /login.do요청이 오면 servlet에 지정해준 클래스를 바라보도록 해.)
	        
	        이 부분도 너무 복잡하다고 생각이 들어 또 하나의 방법으로 서블릿파일에서 @WebServlet()을 통해 경로를 연동시켜주도록 했다. (간단하게 처리 가능)
	        주의) 연결의 방법은 둘 중에 하나만 정의해서 사용을 해야 한다.(둘 다 동시에 적용을 하면 에러남!!)
	        
	        ***최종적으로는 자바파일이 서비스되어지는 것임.
	         --%>
		아 이 디 : <input type="text" name="id" size="20"><br> <%-- 파라미터의 이름은 name속성에 지정하도록 함. --%>
		비밀번호 : <input type="password" name="pw" size="20"><br>
		<input type="submit" value="로그인">
	</form>















<%-- 
자바개발자들이 자바프로그램으로 웹프로그래밍을 할 수 있게끔 제공해주는 기술이 서블릿이다.
실질적으로 jsp라는 기술은 서블릿이라는 기술이 어렵고 복잡하다보니 좀 더 쉽게 웹프로그래밍을 할 수 있는 
자바프로그래밍이 기준이 아닌 웹표준이 기준이 되어지는 화면구성 위주에서 자바프로그램을 사용할 수 있게끔 제공 (빠르게 기술을 익히고 적응할 수 있게끔하는 목적)

최종적인 서비스는 톰캣이 jsp파일을 자바코드인 서블릿으로 변환을 해서 컴파일을 하고 컴파일된 파일을 하나씩 읽어가면서 브라우저에 전송하여 처리되는 구조였음.
서블릿과 jsp를 같이 연동해서 작성하게 되면 메리트가 높음. 그렇기 때문에 어느 만큼 서블릿을 적용할 수 있는지의 일부분에 대해 배울 예정.
jsp의 핵심: 응답으로 보여줄 화면!! (파일을 호출하는 것까지는 톰캣이 동작을 시켜줌)

서비스의 화면을 구성할 때 자바라는 코드를 사용을 안할 수가 없음 (ex.회원가입에 대한 화면 출력)
=> 웹표준으로 작성된 코드에서 자바코드를 사이 사이에 넣는다는 것은 너무 번거로움
=> 이때, 자바코드(기능)와 화면구성에 대한 코드를 완전히 분리시키는 작업을 생각함
서블릿의 자바코드를 jsp메모리 영역에 보관을 하여 필요할 때마다 불러와서 사용하도록 함(현재 프로젝트들이 서블릿을 연동하여 활용되고 있음)

서블릿이 어떻게 도입이 돼서 jsp와 어떻게 연동이 될 수 있는 것인지에 대한 구조를 만들어가면서 실습할 예정 (자바만 서블릿으로 적용하도록 함.)

별도로 파일명을 지정하지 않더라도 자동으로 실행되도록 index.jsp파일을 만듦.
프로젝트명도 빼려면 톰캣의 모듈 => Edit... 에서 path를 /로만 지정 
포트번호를 80으로 지정하면 포트번호를 지정하지 않아도 도메인이름으로 접속이 가능하다.
주의) ip의 주소만으로 접속하게 하려고 위와 같이 지정을 하게 된다면 등록할 수 있는 프로젝트는 하나의 프로젝트만 가능하다. (실제 웹사이트에서 서비스되어지는 설정값들임.)
 --%>
</body>
</html>