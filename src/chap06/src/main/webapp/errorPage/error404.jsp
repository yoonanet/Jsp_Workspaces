<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>404 에러 발생</title>
</head>
<body>
<%-- 
	 [에러 처리]
     오류가 발생했을 때 나타내는 메시지는 개발자들한테 유용한 표시이지만 사용자들은 거부감을 느끼게 될 것이다.
     페이지 오류가 났을 때, 내가 꾸며준 오류페이지를 만들어서 해당 페이지가 서비스될 수 있도록 처리를 한다면 보다 더 유용할 것임 (원칙은 오류없이 완벽한 구동)
     => 동시에 접속하는 클라이언트에게 응답을 보내는 시점에서 문제점이 생기면 그 뒤에 들어오는 클라이언트의 요청들이 딜레이됨. 그렇게 되면 서버의 부하가 생김. (현재 서비스가 되어질 때 비일비재하게 일어나는 일들이다.)
        그렇게 되면 클라이언트들은 빈 화면만 보게 되는 것이다. (품질관리부(검증)에서는 응답을 하는 순간에 문제점이 생기도록 테스트(문제가 되는 상황을 만듦)를 함 -> 원활한 서비스가 이루어지도록 하는 중간 테스트과정임)
        이때, 문제점을 해결하는 과정에서 대신 서비스할 수 있는 화면을 구성하도록 한다. 
     
     순서대로 동작되지 않는 웹사이트의 문제점이 특히 금융사같은 경우 치명적이다.
     위와 같은 예외적인 상황들에 대해 제대로 처리가 되어져야 하는 것이다. 
     -> 이 예외의 부분에서 디버깅하는 과정이 3-4개월이 넘어갈 수 있음 (기능구현을 못한 것이 아닌 예외적인 상황을 예측하고, 대처코드를 작성한다.)
     
     에러 감지 -> 개발자가 만든 에러 페이지로 가도록 함 (지금은 톰캣이 제공하는 에러 페이지를 보여주고 있는데 그 페이지를 중간에 가로채서 나의 페이지를 출력하도록 한다.) 
                                                         -> 톰캣 에러페이지에 404: 페이지를 찾을 수 없을 때 보내는 에러 번호이다.  
     ● 에러상황은 매우 다양함. 에러가 발생했을 때 보여줄 에러페이지부터 작성하도록 하자. (실습은 jsp로 하고 있지만 정적인 html로 구성해도 됨)
                               (404 -> 존재하지 않는 페이지를 클라이언트가 요청해오면 서비스해주는 페이지)
                               
     클라이언트의 요청에 대해서 웹페이지를 찾는 주체가 톰캣!! -> 톰캣에게 내가 만든 페이지를 에러페이지로 출력을 해달라고 알려줘야 함.
     이를 web.xml(나와 톰캣이 소통하는 수단으로 구동되는 맨 마지막 순서에 톰캣이 이 파일을 읽어감, 톰캣에게 정보를 알려주고 싶을 때 작성)을 통해 알려주도록 한다.
          => 수정이 되면 restart를 꼭 하고 실행하도록 해야함.
     
     error-page를 부모로 지정할 수 있다. 그 안에 자식 ↓ 
     	- error-code => 에러마다 고유번호로 정의가 되어져 있음. 
     	                위에 지정한 에러코드에 해당하는 에러가 발생하면 아래에 지정한 페이지 위치를 알려주도록 한다.
     	- location => 에러페이지의 위치정보를 적어주도록 한다. 
     즉, 클라이언트가 호출한 페이지에서 지정한 에러 코드 번호에 관련된 에러가 발생되어지면 location 위치의 웹페이지가 반환이 되어지는 것이다!!
     
     프로젝트를 서버에 올려야 지금 지정한 설정사항들이 동작되어질 수 있다는 것을 주의하도록 하자.    
 --%>
 
 
 	<h1>요청한 페이지가 존재하지 않습니다.</h1>
 	<h1>주소를 올바르게 입력했는지 확인해 보시기 바랍니다.</h1>
 
 
</body>
</html>