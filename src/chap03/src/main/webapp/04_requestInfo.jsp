<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Request 객체</title>
</head>
<body>
	<h1>최윤아</h1>
	
	요청 URI = <%= request.getRequestURI()%><br> <!-- (< % = 표현식) 자바영역에 대한 결과값을 브라우저 이 위치에 출력해달라는 의미 -->
	<%-- 브라우저를 통해서 이 페이지를 요청하면 톰캣이 이 페이지를 찾아서 봄 
	     그러기 전에 클라이언트가 요청이 왔으니까 그 요청에 대한 정보를 new하여 request의 메모리 공간만큼 할당하여 정보를 담아줌(클라이언트가 요청을 해오면 요청되어지는 정보가 브라우저 내용임)
	     request => get으로 시작하는 메소드가 많음 get은 꺼내온다는 의미로 클라이언트의 정보들을 꺼내온다는 것이다.
	     클라이언트가 정보를 요청을 하면 메서드를 통해 정보를 꺼내오면서 톰캣과 소통을 하면 된다.
	     
	     getRequestURI()메소드: 클라이언트의 요청 정보에서 -> 앞에 포트번호 이후부터의 정보를 알려주는 것임 (!!반드시 기억!!)
	                            지금 현재의 웹페이지를 알려주기 때문에 어떤 활용성이 있는지에 대한 의문을 가져야함 
	                            => 여기서는 의미가 없어보이지만 정말 중요한 정보임!! 뒤에 가서 클라이언트가 어떤 정보를 요청해왔느냐에 파싱을 수행하게될 때 유용하게 활용 --%>

	컨텍스트 경로 = <%= request.getContextPath() %><br> <%-- 프로젝트의 이름을 반환해오는 메서드임 (!!반드시 기억!!) -> 여기서의 Context는 톰캣이 사용하는 메모리 영역을 의미 --%>
	클라이언트IP = <%= request.getRemoteAddr() %><br> <%-- 요청한 클라이언트의 IP주소 반환 --%>
	<%-- 예전에는 특정 웹사이트에 댓글이 달린 것을 보면 ip주소가 달려있었음 -> 댓글을 달았던 IP주소를 나타내주고 있었던 것임!!
	     우리가 브라우저에 댓글을 달면 우리의 ip도 같이 전달이 된다. 그것을 서버가 받으니까 서버가 가지고 있다가 그 주소를 알고 싶을 때 getRemoteAddr()메소드로 출력하도록 한다.
	     이때, IP를 localhost로 접근하게 되면 0:0:0:0:0:0:0:1로 출력됨(접속한 클라이언트의 IP이기 때문임) --%>
	
	요청정보 전송방식 = <%= request.getMethod() %><br> 
	<%-- 결과: GET => 크게 보면 전송방식은 4가지의 방식이 있음. 
	     2가지 방식을 이해하도록 한다. (GET방식, POST방식)
	     일단 디폴트의 전송 방식이 GET방식인 것으로 이해하도록 한다.
	     GET방식은 요청페이지와 함께 사용자의 입력값을 같이 전송하는 방식이다. => 하지만 로그인할 때 아이디와 패스워드가 노출이 되면 안된다.
	     POST방식은 사용자가 입력한 정보를 감춰서 전송하는 방식이다. --%>
	서버이름 = <%= request.getServerName() %><br>
	<%-- 클라이언트의 정보뿐만 아니라 getServerName()메서드를 통해서 응답하는 서버의 IP정보도 반환해준다.
	     도메인으로 요청을 해왔다면 도메인이름을, IP값으로 요청을 해왔다면 IP정보로 출력을 해준다. --%>
	서버포트 = <%= request.getServerPort() %><br> <%-- 클라이언트에서 같이 요청을 했었던 port번호까지도 getServerPort()메서드를 통해 출력할 수 있다.
	                                                   (클라이언트한테 서버포트까지 서비스하는 일은 극히 드물다. 톰캣과 소통하는 기능을 알아두는 것에 초점.) --%>
	
	<%-- 클라이언트의 요청을 처음으로 받는 대상이 서버(톰캣)이고,
	    (그렇게 처음으로 받은 요청 정보를 자료형의 메모리로 new하여 할당받아서 저장하고, 그 시작주솟값을 고정된 request참조변수에 담아두는 것)
	     내가 만든 페이지를 출력하는 주체가 톰캣이기 때문에 톰캣과 어떻게 소통을 하느냐가 백엔드 기술에 핵심이 된다!!
	     즉, request객체에서 어떤 메서드들을 제공해주고 있느냐를 파악하고 있는 것이 중요하다. --%>
	











<%-- 기본객체(내장객체): 웹 프로그래밍에 필요한 기능을 제공해주면서 jsp에서 별도 선언 없이 사용 가능한 객체를 말함.
     프로그래밍 언어에서 객체라는 단어가 등장했었음. 
     jsp라는 형식은 html이였지만 살펴보는 요소들을 바라보면 jsp의 실행주체는 서버(톰캣)이였음 jsp문법은 톰캣이 이해하는 문법요소들이다.
     
     페이지 디렉티브는 설정에 대한 정보를 제공해주는 문법요소였다. 
     스크립트가 포인트이다. => 스크립트는 3가지가 있었고, 웹표준 형식에서 자바를 사용하려는 목적으로 제공한 문법이였음
     즉, 자바문법이 전체적인 포인트인 것이다.
     
     기본객체는 자바의 객체를 의미하는 것이다. new가 객체임(실체화되어진 것)!! 
     => 메모리 입장에서는 인스턴스, 문법(이론적) 입장에서는 객체(관점에 따른 용어임) => 같은 대상을 바라보는데 어떤관점에서 바라보는지가 틀린 것임.
     참조변수에 주소값을 통해서 접근하도록 했음!! 포괄적으로는 참조변수를 인스턴스라고 부름
     
     객체는 반드시 new를 하여 메모리가 할당이 돼서 실체화되어야 비로소 사용을 할 수 있는 것임 
     jsp의 기본객체는 톰캣이 살아나면서 new를 해주는 것이다. (이미 new를 해주는 것!!)
     그렇게 할당이 되어있으면 참조변수.으로 접근을 할 수 있는 것이다.
     
     jsp의 참조변수는 request(클라이언트가 요청), response(요청을 받은 서버가 응답), out, session이 있음 => 이 안에 어떤 정보를 알려주는 메소드를 제공해주고 있는지 연결지어서 궁금증을 가지도록 하자.
     (톰캣이 이미 new를 하여 메모리를 할당해놓고 이 참조변수들이 바라보도록 해놓은 것이다.)
     그래서 jsp페이지 내에서 별도로 new를 하지 않고도 접근을 할 수 있는 객체인 것이다. 
     
     기본적으로 자바는 클래스의 필드를 은닉화시킴. 그래서 필드를 들여다보지 못한다 
     이때, 미리 클래스를 만들어놨다는 것은 유용한 기능들을 미리 생성을 한 것이라고 생각!!
     
     [톰캣에게 요청 -> 파일존재여부확인 -> 존재하면 new하여 클라이언트의 요청 사항들을 보관]
     ***서버인 톰캣에게 정보를 요청하면 톰캣은 new를 하여 클라이언트의 요청 사항들을 보관을 한다.(추가적인 요청사항부분들도 저장을 해놓음)
        우리 개발자들은 클라이언트가 요청한 정보들을 모른다. 그 정보는 톰캣만 알고 있는 것임
        그래서 어떤 요청을 누가 해왔는지 알고 싶으면 request.(HttpSevletRequest참조자료형에 보관되어져 있음)을 통해서 필요한 정보들을 꺼내오면 되는 것이다.
--%>
</body>
</html>