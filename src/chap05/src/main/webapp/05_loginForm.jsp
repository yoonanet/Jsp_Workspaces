<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>로그인 화면</title>
</head>
<body>
	
	<h3>로그인하세요.</h3>
	<form action="05_loginProcess.jsp" method="post"> <%-- 같은 폴더 위치일 때 이름만 지정 --%>
		아 이 디 : <input type="text" name="id" size="20"><br>
		비밀번호 : <input type="password" name="pw" size="20"><br>
		<input type="submit" value="로그인"> <%-- submit: 서버에 다시 요청이 되어지게끔 동작을 하는 입력양식태그
		                                          요청은 페이지이고, 그 페이지에 대한 사항을 from태그 action속성에 적어주도록 한다. --%>
	</form>
	<%-- 로그인정보가 그대로 노출되고 있음 -> 전송형태에서 default가 get방식이기 때문임
	     post는 상단에 쿼리문자열로 전달되어지는 것이 아니라 메서드의 바디영역에 감춰져서 전송되어짐 (감추는 것이라 속도가 더 느림)
	     퍼포먼스 처리 성능 때문에 두 가지의 전송형태로 나뉘는 것임(진짜로 숨길 내용만 post로 지정해야한다.) --%>
	
	
	
	
	
	<%-- 
	[영역이라는 개념]
	자바의 영역은 자바가 관리하는 메모리를 의미한다. 
	자바는 3개의 메모리 영역(method[프로그램의 시작과 끝까지 메모리에 보관, 프로그램 종료 시 소멸시킴]_.class의 실행코드와 static, 
	                         stack[영역에서 벗어나는 시점에 소멸]_지역변수와 매개변수(메소드에 입력으로 전달받는 파라메타), 
	                         heap[참조변수가 heap영역을 가리키지 않으면 관찰하고 있던 자바가 해당 메모리를 소멸시킴]_new요청에 의해 할당되어지는 인스턴스)으로 관리함 
	=> 각각의 메모리 특징이 있었음(데이터의 소멸시점에 따라서 분류함)
	
	jsp(최종목표는 게시판)에서도 영역에 대한 개념은 메모리를 의미함
	jsp는 메모리영역을 4가지로 관리한다. (!!기본객체와 동일한 이름의 영역이 있지만 그 객체들이 메모리 영역안에 저장되는 의미가 아니다!!)
	=> data에 대한 소멸 시점에 따라서 메모리를 구분짓고 있는 것이다.
	
	● 일단 page영역, request영역은 동일한 의미로 생각 (추후에 차이를 설명할 것)
	=> a브라우저가 www.----(도메인)으로 요청을 하면 실질적으로 서버에서는 index.jsp를 응답으로 전달하는 것임 
	   a브라우저와 b브라우저도 도메인을 통해서 첫 메인을 서비스 받도록 요청을 한 것으로 가정
	   jsp를 서비스 요청해오면 서버에 해당 jsp파일이 있을 것이다. 실질적으로 jsp페이지가 브라우저상에 response(응답)가 될 것이다.
	   즉, 요청을 받고 응답이 될 때까지 데이터를 잘 보관하고 있다가 데이터를 보냈을 때(응답이 끝난 시점) 영역의 데이터들을 소멸시키는 영역이다.
	   요청이 왔을 때 jsp입장에서는 DB에서 읽어와서 처리를 해야 한다면 jsp변수에 담아둬야 함 -> 그 데이터를 응답으로 보내고 난 다음에 자동으로 그 데이터를 삭제해버리는 메모리 영역을 말하는 것이다.
	   request영역에는 데이터를 어떻게 저장을 해야할까? 이 방법을 살펴볼 예정
	   삭제는 응답을 보내는 시점에 소멸되기 때문에 신경 쓸 부분이 아님
	● session영역: 일부로 강제 삭제해달라고 요청을 해야하거나 별도로 삭제를 요청하지 않으면 클라이언트가 브라우저를 x버튼을 눌러서 종료할 때 삭제되어지는 메모리 영역을 말한다.
	session영역에 데이터를 보관하게 되면 더 오래 보관하게 됨 => 클라이언트가 삭제 요청을 보내와야 소멸이 되고 요청하지 않으면 종료버튼을 누르지 않는 이상 보관됨
	● application영역: 서버가 구동되고 난 이후,  application 영역에 데이터를 저장하면 서버를 끄기 전까지 데이터를 보관하는 영역이다.
	서버(ex.네이버)의 웹사이트들은 점검에 대한 별도의 공지가 없는 한 24시간 서비스가 이루어짐 (서버는 함부로 껐다가 키면 안됨)
	application영역에 데이터가 저장되면 서버를 끄기 전까지 데이터를 유지되기 때문에 영구적으로 보관된다.
	하지만, 함부로 데이터를 application영역에 저장하다보면 메모리가 부족해질 수도 때문에 
	가급적이면 application에 데이터를 관리하는 것은 우리가 코드를 구성하는데에 있어서는 사용하지 않는 것이 좋음
	
	데이터저장은 주로 클라이언트가 웹페이지를 요청하면 별도의 파일 요청이 없을 때, index.jsp를 서비스함
	
	- 코드가 수행이 되면서 페이지나 리퀘스트에 보관하면서 처리를 수행하고 그 수행이 끝나는 시점에 페이지가 브라우저로 보관이 될 것이다.
	  전달되어졌을 때 그 영역에 보관된 데이터들은 jsp가 강제로 소멸시킴 따라서 우리가 신경쓸 부분이 아님
	
	jsp의 통신프로토콜 방식은 http 방식을 사용한다.(request / response가 완료되면 연결을 끊는 것이 특징)	
	웹서비스가 이루어지려면 서버와 클라이언트가 존재해야한다.
	http프로토콜방식은 응답이 되어지면 연결을 끊어버림 (연결을 끊지 않으면 서버는 클라이언트의 모든 정보들을 다 관리해야하기 때문임 - 엄청난 양의 정보 관리가 필요)
	
	연결을 끊었을 때의 단점?
	로그인을 하고 난 이후에 서버가 환영한다는 문구로 응답을 보내고 나서 연결을 끊어버리기 때문에 
	로그인한 사용자가 다른 서비스를 클릭했을 때 로그인을 한 회원이 서비스를 요청하는 것인지 서버가 판단할 수 없음
	따라서, 전에 요청한 사람의 정보인지를 체크하기 위해서(즉, 위와 같은 문제를 방지하기 위해서) jsp가 메모리 영역을 나뉘어놓은 것이다. (이 부분을 살펴볼 예정)
	 --%>
	
</body>
</html>