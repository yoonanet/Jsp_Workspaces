<%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>

<%-- 클라이언트가 페이지를 먼저 요청을 해야 서비스가 이루어짐
     페이지 요청이 왔을 때 서버에서는 쿠키라는 것을 생성해서 페이지를 서비스하면서 
     쿠키정보도 같이 전달을 해서 브라우저에 쿠키정보를 보관하게끔 실습을 할 예정
     
     쿠키를 생성할 때, 쿠키는 이름을 가지고 값을 가지는 구성요소로 이루어져 있음(map의 형식으로 생성)
     서버에서 생성한 쿠키를 페이지를 응답으로 보내면서 같이 보내고 싶은 것
     응답과 관련된 것을 처리하는 객체_response로 처리
     
     ***쿠키는 정보를 보관하는 주체가 클라이언트 영역이다.
        요청을 보내온 클라이언트가 쿠키를 보관하게끔 하는 것이다.
        그렇게 요청을 할 때마다 쿠키정보가 같이 보내어지는 것임 --%>
<%@ page import="java.net.URLEncoder" %>

<%
	//자바가 쿠키를 생성할 수 있는 참조자료형을 제공해주고 있음!! -> 따라서 메모리를 할당하여 메서드를 통해 쿠키를 사용하면 됨.
	Cookie cookie = new Cookie("name", URLEncoder.encode("홍길동"));//내가 원하는 쿠키를 생성하고 싶다면 입력으로 넣어주면 되는데 쿠키는 키, 벨류의 형태임 
	/*벨류에서 이름에 대한 값을 그대로 넣어주면 안됨.  
	전송방식을 봤을 때, get방식일때는 브라우저에 탑제됨(파라메타가 전송되어지는 과정에서 인코딩, 디코딩이 자체적으로 진행됨). post방식일때는 파라메타의 값들이 바디영역에 담김
	쿠키는 post처럼 인코딩 디코딩과정을 거치지 않기 때문에 클라이언트에 쿠키 값이 저장이 된다면 한글이 깨지면서 문제가 생길 수 있음
	따라서 데이터를 자체적으로 인코딩을 시켜줘야 한다. URLEncoder(static으로 되어있어서 별도로 메모리를 생성하지 않아도됨)자료형은 java.net.URLEncoder위치에 보관됨.
	네트워크에 전달할 때 문제없이 문자를 받을 수 있도록 유니코드로 변환을 해주게 됨*/
	
	response.addCookie(cookie); //addCookie메서드를 통해서 내가 만든 쿠키정보를 입력으로 전달한다면 응답보낼때 쿠키정보를 담아서 같이 보내주게 된다.
	
%>

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>쿠키 생성</title>
</head>
<body>

	<h3>생성한 쿠키 정보</h3>
	<%= cookie.getName() %> 쿠키의 값: <%= cookie.getValue() %> 
	<%-- getName: 쿠키의 이름을 반환해주는 메소드, getValue: 쿠키의 값을 반환해주는 메소드
	쿠키의 값을 메소드로 그냥 호출을 하게 되면 넣어준 값으로 보여지지 않음 (결과값: %ED%99%8D%EA%B8%B8%EB%8F%99)
	=> 한글의 텍스트를 네트워크상에 유니코드로의 인코딩을 해준 값이다. (!!인코딩을 하여 네트워크상에 전송되어진 것!!)
	
	톰캣은 인코딩이 되어져 있는 값을 디코딩하여 "홍길동"으로 꺼내오는 것이다.
	http프로토콜의 방식을 통해서 인코딩과 디코딩의 과정이 이루어지는 것이다.
	
	쿠키는 네트워크상에 주고받는 것은 맞지만 쿼리문자열로 주고받는 개념이 아니다. (서버가 임의로 보내주는 것임)
	그래서 자체적으로 인코딩의 과정을 거쳐서 담아두는 것임.
	
	쿠키라는 정보는 클라이언트와 상관이 없음.
	로그인을 한 사람이다 아니다를 서버가 표시를 해서 보내준 것이고,
	그렇게 보내준 이유를 실습을 통해 살펴보고자 하는 것이 주 목적인 것이다. --%>





</body>
</html>


<%-- 
쿠키: 웹사이트에 처음 접속할 때 쿠키에 대한 동의를 물어보고 있음 => 이 쿠키가 잘못 악용이 되면 개인정보들을 다 빼갈 수 있음

http프로토콜방식은 서버가 응답을 보내오면 연결을 끊어버림
=> http프로토콜방식에서 요청을 받은 서버가 연결을 끊어버린 특성때문에 쿠키와 세션에 대한 기능을 제공하게 된 것임. => 서버와 클라이언트의 소통이 끊어지는 것
클라이언트가 웹사이트 메일 로그인 -> 로그인 성공에 대한 메일 페이지를 서버가 응답으로 보냄 (앵커태그로 상세페이지로 들어갈 수 있는 제목들을 보여줄 것임)
                                  -> 이때 연결이 끊어졌을 것이다. -> 새로운 요청을 보냄(로그인했던 사람만 서비스 받을 수 있는 내용_메일 제목 클릭)
                                  -> 서버는 연결을 끊었기 때문에 로그인을 한 사람인지에 대한 정보를 알 수 없음
                                     (이전에 로그인했던 사람인지에 대한 판단이 가능해야 한다. 
                                      즉, 연결이 끊어졌다고 하더라도 클라이언트와 서버가 정보를 공유해야하는 상황이 발생될 수 밖에 없음_로그인이라는 기능 때문에)
서버컴퓨터입장에서는 정보를 가지고 있어야 한다면 메모리에 넣어줘야 하는데(전세계인들이라 정보양이 거대함) 메모리는 한계가 있음    


그래서 나온 기술이 쿠키와 세션의 기술인 것이다. (서버와 클라이언트의 정보에 대한 공유를 위한 기능)
쿠키와 세션이라는 기능은 클라이언트와 서버간에 공유해야할 데이터에 대한 처리를 위한 기술이다. 
쿠키를 승인을 요청하는 이유: 쿠키라는 정보를 오라클(서버)이 만들어서 내 PC에다가 저장을 해놓는다는 의미이다.
                             그렇게 되면 웹서버가 악성코드를 어떻게 전달할지 알 수 없음 (쿠키를 악용한다는 것은 매우 위험한 것)

jsp에서는 쿠키 정보(쿠키는 jsp기술임)를 서버만이 생성할 수 있음 (특정기술에 따라서는 클라이언트에서 쿠키정보를 생성할 수 있음 -> 아주 예외적인 것)
jsp기술은 쿠키라고 하는 정보를 서버만이 생성을 해서 클라이언트와 서버간의 정보를 공유하게된다. (보관은 브라우저가함)
특정 기술은 클라이언트가 쿠키정보를 생성할 수 있게끔도 제공함 -> 드문경우임
클라이언트의 정보공유를 위해서 서버가 생성해서 응답을 보내면서 쿠키를 함께 담아서 클라이언트의 쿠키 저장소공간에 보관하게끔 서비스가 됨

쿠키의 구성요소
쿠키에는 이름을 가지고 값이 저장되며(쿠키도 map처럼 데이터가 정의됨) 유효시간을 가져서 언제까지 보관할지 언제 소멸시킬지의 정보를 가짐 
도메인, 경로의 요소를 통해 보안을 처리한다.

쿠키의 이름은 아스키 코드의 알파벳과 숫자의 조합으로만 정의할 수 있음
              특수문자와 여백을 주면 안된다.

공유의 데이터를 클라이언트에서 관리하는 것
클라이언트의 쿠키라는 별도의 저장소공간을 운영체제가 가지고 있음
즉, 그 데이터를 가지고 있는 보관의 주체가 쿠키는 클라이언트가 된다.

session: 기본객체와 영역에 session이 있었음
         서버에서 사용하는 것이였음, 관리의 주체가 서버이다.
         공유의 데이터를 서버에서 관리하는 것
         
어떤식으로 관리를 하면서 서비스가 이루어져야하는지를 살펴볼 예정

쿠키를 서버에서 생성 -> 어떻게 생성을 하면 될지 (이 설명 파일 안에서 실습 예정)                              
--%>